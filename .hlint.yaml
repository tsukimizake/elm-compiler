# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Warnings currently triggered by your code
- ignore: {name: "Eta reduce"}
- ignore: {name: "Use const"}
- ignore: {name: "Use record patterns"}
- ignore: {name: "Redundant $"}
- ignore: {name: "Use when"}
- ignore: {name: "Use putStr"}
- ignore: {name: "Use list literal pattern"}
- ignore: {name: "Redundant if"}
- ignore: {name: "Use guards"}
- ignore: {name: "Unused LANGUAGE pragma"}
- ignore: {name: "Avoid lambda"}
- ignore: {name: "Use void"}
- ignore: {name: "Use fmap"}
- ignore: {name: "Use <$>"}
- ignore: {name: "Redundant bracket"}
- ignore: {name: "Use camelCase"}
- ignore: {name: "Parse error: on input `pattern'"}
- ignore: {name: "Use fromMaybe"}
- ignore: {name: "Use otherwise"}
- ignore: {name: "Redundant lambda"}
- ignore: {name: "Redundant bang pattern"}
- ignore: {name: "Use infix"}
- ignore: {name: "Fuse foldr/map"}
- ignore: {name: "Use negate"}
- ignore: {name: "Use if"}
- ignore: {name: "Avoid lambda using `infix`"}
- ignore: {name: "Use map once"}
- ignore: {name: "Use list comprehension"}
- ignore: {name: "Use :"}
- ignore: {name: "Use map"}
- ignore: {name: "Use zipWithM"}
- ignore: {name: "Use forM_"}
- ignore: {name: "Use putStrLn"}
- ignore: {name: "Hoist not"}
- ignore: {name: "Use tuple-section"}
- ignore: {name: "Replace case with maybe"}
- ignore: {name: "Use newtype instead of data"}
- ignore: {name: "Use lambda-case"}


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]


# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}

# The hints are named by the string they display in warning messages.
# For example, if you see a warning starting like
#
# Main.hs:116:51: Warning: Redundant ==
#
# You can refer to that hint with `{name: Redundant ==}` (see below).

# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
